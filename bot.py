import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import openai
from datetime import date

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

# –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
user_last_free_date = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è)
openai.api_key = OPENAI_API_KEY

def can_use_free(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å–µ–≥–æ–¥–Ω—è"""
    today = date.today()
    
    if user_id not in user_last_free_date:
        user_last_free_date[user_id] = today
        return True
    
    if user_last_free_date[user_id] == today:
        return False
    else:
        user_last_free_date[user_id] = today
        return True

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    text = f"""
–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! üîÆ 

–Ø - AI-—Ç–∞—Ä–æ–ª–æ–≥. –£ —Ç–µ–±—è –µ—Å—Ç—å **1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ –¥–µ–Ω—å**.

–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å —Å—Ç–æ–∏—Ç **50 —Ä—É–±–ª–µ–π**.

üí´ –ö–æ–º–∞–Ω–¥—ã:
/card - –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å)
/balance - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å
/buy - –∫—É–ø–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å - –∏ —è –ø–æ—Å–º–æ—Ç—Ä—é, —á—Ç–æ –≥–æ–≤–æ—Ä—è—Ç –∫–∞—Ä—Ç—ã!
    """
    await update.message.reply_text(text)

async def balance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–æ–≤"""
    user_id = update.effective_user.id
    
    if can_use_free(user_id):
        status = "‚úÖ –£ —Ç–µ–±—è –µ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!"
    else:
        status = "‚ùå –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"
    
    text = f"""
{status}

üí≥ –ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É–π /buy
    """
    await update.message.reply_text(text)

async def buy_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    text = """
üí≥ **–ü–æ–∫—É–ø–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤**

üéØ –¢–∞—Ä–∏—Ñ—ã:
‚Ä¢ 5 –∑–∞–ø—Ä–æ—Å–æ–≤ - 200 —Ä—É–±–ª–µ–π
‚Ä¢ 15 –∑–∞–ø—Ä–æ—Å–æ–≤ - 500 —Ä—É–±–ª–µ–π  
‚Ä¢ 30 –∑–∞–ø—Ä–æ—Å–æ–≤ - 800 —Ä—É–±–ª–µ–π

üí∏ **–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:**
1. –°–ë–ü (–ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞)
2. –ö–∞—Ä—Ç–∞ (Tinkoff, –°–±–µ—Ä)

üì® –î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–∏—à–∏—Ç–µ @–≤–∞—à_–ª–æ–≥–∏–Ω

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –∑–∞–ø—Ä–æ—Å—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç!
    """
    await update.message.reply_text(text)

async def get_ai_prediction(prompt):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–µ–π OpenAI"""
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã - –º—É–¥—Ä—ã–π —Ç–∞—Ä–æ–ª–æ–≥. –î–∞–π –∫—Ä–∞—Ç–∫–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –≤ –º–∏—Å—Ç–∏—á–µ—Å–∫–æ–º —Å—Ç–∏–ª–µ. –ù–∞–∑–æ–≤–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–∞—Ä—Ç—É –¢–∞—Ä–æ –∏ –µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=150
        )
        return response.choices[0].message.content
    except Exception as e:
        logging.error(f"OpenAI error: {e}")
        return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∫–∞—Ä—Ç—ã –ø–æ–∫–∞ –º–æ–ª—á–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

async def card_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–¥–∞–µ—Ç –∫–∞—Ä—Ç—É –¥–Ω—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ª–∏–º–∏—Ç–∞"""
    user_id = update.effective_user.id
    
    if not can_use_free(user_id):
        await update.message.reply_text(
            "‚ùå –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!\n\n"
            "üí≥ –ò—Å–ø–æ–ª—å–∑—É–π /buy —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã\n"
            "üìä –ò–ª–∏ –ø—Ä–æ–≤–µ—Ä—å /balance"
        )
        return
    
    await update.message.chat.send_action(action="typing")
    
    prediction = await get_ai_prediction("–í—ã—Ç–∞—â–∏ —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É –¢–∞—Ä–æ –∏ –¥–∞–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
    await update.message.reply_text(f"üÉè –ö–∞—Ä—Ç–∞ –¥–Ω—è: \n\n{prediction}\n\n‚ú® –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ª–∏–º–∏—Ç–∞"""
    user_message = update.message.text
    user_id = update.effective_user.id
    
    if user_message.startswith('/'):
        return
    
    if not can_use_free(user_id):
        await update.message.reply_text(
            "‚ùå –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!\n\n"
            f"üí´ –¢–≤–æ–π –≤–æ–ø—Ä–æ—Å: '{user_message}'\n\n"
            "üí≥ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–π /buy –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤\n"
            "üìä –ò–ª–∏ –ø—Ä–æ–≤–µ—Ä—å /balance"
        )
        return
    
    await update.message.chat.send_action(action="typing")
    
    prediction = await get_ai_prediction(user_message)
    await update.message.reply_text(
        f"üîÆ –í –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å: \n\n{prediction}\n\n"
        f"‚ú® –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"
    )

def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("card", card_command))
    app.add_handler(CommandHandler("balance", balance_command))
    app.add_handler(CommandHandler("buy", buy_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()

if __name__ == '__main__':
    main()
