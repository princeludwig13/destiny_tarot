import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import openai
from datetime import date

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

# –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
user_last_free_date = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI
client = openai.OpenAI(api_key=OPENAI_API_KEY)

def can_use_free(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å–µ–≥–æ–¥–Ω—è"""
    today = date.today()
    
    if user_id not in user_last_free_date:
        user_last_free_date[user_id] = today
        return True
    
    if user_last_free_date[user_id] == today:
        return False
    else:
        user_last_free_date[user_id] = today
        return True

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    text = f"""
–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}! üîÆ 

–Ø - AI-—Ç–∞—Ä–æ–ª–æ–≥. –£ —Ç–µ–±—è –µ—Å—Ç—å **1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ –¥–µ–Ω—å**.

üí´ –ö–æ–º–∞–Ω–¥—ã:
/card - –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É –¥–Ω—è
/balance - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å
/buy - –∫—É–ø–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!
    """
    await update.message.reply_text(text)

async def balance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–æ–≤"""
    user_id = update.effective_user.id
    
    if can_use_free(user_id):
        status = "‚úÖ –£ —Ç–µ–±—è –µ—Å—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è!"
    else:
        status = "‚ùå –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"
    
    await update.message.reply_text(status)

async def buy_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    text = """
üí≥ **–ü–æ–∫—É–ø–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤**

üéØ –¢–∞—Ä–∏—Ñ—ã:
‚Ä¢ 5 –∑–∞–ø—Ä–æ—Å–æ–≤ - 200 —Ä—É–±–ª–µ–π

üì® –î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–∏—à–∏—Ç–µ @–≤–∞—à_–ª–æ–≥–∏–Ω
    """
    await update.message.reply_text(text)

async def get_ai_prediction(user_question=None):
    """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç –ò–ò"""
    try:
        if user_question is None:
            prompt = "–í—ã—Ç–∞—â–∏ —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É –¢–∞—Ä–æ –∏ –¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"
        else:
            prompt = f"–ö–∞–∫ —Ç–∞—Ä–æ–ª–æ–≥, –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: {user_question} (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –º–∏—Å—Ç–∏—á–µ—Å–∫–∏)"
        
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –º—É–¥—Ä—ã–π —Ç–∞—Ä–æ–ª–æ–≥. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –º–∏—Å—Ç–∏—á–µ—Å–∫–∏."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=150
        )
        return response.choices[0].message.content
    except Exception as e:
        logger.error(f"OpenAI error: {e}")
        return "–ö–∞—Ä—Ç—ã –ø–æ–∫–∞ –º–æ–ª—á–∞—Ç... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

async def card_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–¥–∞–µ—Ç –∫–∞—Ä—Ç—É –¥–Ω—è"""
    user_id = update.effective_user.id
    
    if not can_use_free(user_id):
        await update.message.reply_text("‚ùå –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /buy")
        return
    
    await update.message.chat.send_action(action="typing")
    prediction = await get_ai_prediction()
    await update.message.reply_text(f"üÉè –ö–∞—Ä—Ç–∞ –¥–Ω—è:\n\n{prediction}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"""
    user_message = update.message.text
    user_id = update.effective_user.id
    
    if user_message.startswith('/'):
        return
    
    if not can_use_free(user_id):
        await update.message.reply_text("‚ùå –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /buy")
        return
    
    await update.message.chat.send_action(action="typing")
    prediction = await get_ai_prediction(user_message)
    await update.message.reply_text(f"üîÆ {prediction}")

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        application = Application.builder().token(TELEGRAM_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("card", card_command))
        application.add_handler(CommandHandler("balance", balance_command))
        application.add_handler(CommandHandler("buy", buy_command))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

if __name__ == '__main__':
    main()
